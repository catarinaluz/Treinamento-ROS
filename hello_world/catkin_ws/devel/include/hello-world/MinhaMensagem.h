// Generated by gencpp from file hello-world/MinhaMensagem.msg
// DO NOT EDIT!


#ifndef HELLO-WORLD_MESSAGE_MINHAMENSAGEM_H
#define HELLO-WORLD_MESSAGE_MINHAMENSAGEM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Int32.h>

namespace hello-world
{
template <class ContainerAllocator>
struct MinhaMensagem_
{
  typedef MinhaMensagem_<ContainerAllocator> Type;

  MinhaMensagem_()
    : primeiroInteiro(0)
    , segundoInteiro()
    , texto()  {
    }
  MinhaMensagem_(const ContainerAllocator& _alloc)
    : primeiroInteiro(0)
    , segundoInteiro(_alloc)
    , texto(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _primeiroInteiro_type;
  _primeiroInteiro_type primeiroInteiro;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _segundoInteiro_type;
  _segundoInteiro_type segundoInteiro;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _texto_type;
  _texto_type texto;





  typedef boost::shared_ptr< ::hello-world::MinhaMensagem_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hello-world::MinhaMensagem_<ContainerAllocator> const> ConstPtr;

}; // struct MinhaMensagem_

typedef ::hello-world::MinhaMensagem_<std::allocator<void> > MinhaMensagem;

typedef boost::shared_ptr< ::hello-world::MinhaMensagem > MinhaMensagemPtr;
typedef boost::shared_ptr< ::hello-world::MinhaMensagem const> MinhaMensagemConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hello-world::MinhaMensagem_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hello-world::MinhaMensagem_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hello-world::MinhaMensagem_<ContainerAllocator1> & lhs, const ::hello-world::MinhaMensagem_<ContainerAllocator2> & rhs)
{
  return lhs.primeiroInteiro == rhs.primeiroInteiro &&
    lhs.segundoInteiro == rhs.segundoInteiro &&
    lhs.texto == rhs.texto;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hello-world::MinhaMensagem_<ContainerAllocator1> & lhs, const ::hello-world::MinhaMensagem_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hello-world

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hello-world::MinhaMensagem_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hello-world::MinhaMensagem_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hello-world::MinhaMensagem_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hello-world::MinhaMensagem_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hello-world::MinhaMensagem_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hello-world::MinhaMensagem_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hello-world::MinhaMensagem_<ContainerAllocator> >
{
  static const char* value()
  {
    return "80fc205c8bdb1be64b2141852ee2a48c";
  }

  static const char* value(const ::hello-world::MinhaMensagem_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x80fc205c8bdb1be6ULL;
  static const uint64_t static_value2 = 0x4b2141852ee2a48cULL;
};

template<class ContainerAllocator>
struct DataType< ::hello-world::MinhaMensagem_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hello-world/MinhaMensagem";
  }

  static const char* value(const ::hello-world::MinhaMensagem_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hello-world::MinhaMensagem_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Mensagem de teste para o Tutorial de ROS do Toschi\n"
"#O objetivo da vida (e dessa mensagem) é ser feliz\n"
"\n"
"int32 primeiroInteiro\n"
"#Inteiro de tipo primitivo\n"
"\n"
"std_msgs/Int32 segundoInteiro\n"
"#Inteiro usando uma mensagem pré-pronta\n"
"\n"
"string texto\n"
"#Texto de tipo primitivo\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Int32\n"
"int32 data\n"
;
  }

  static const char* value(const ::hello-world::MinhaMensagem_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hello-world::MinhaMensagem_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.primeiroInteiro);
      stream.next(m.segundoInteiro);
      stream.next(m.texto);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MinhaMensagem_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hello-world::MinhaMensagem_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hello-world::MinhaMensagem_<ContainerAllocator>& v)
  {
    s << indent << "primeiroInteiro: ";
    Printer<int32_t>::stream(s, indent + "  ", v.primeiroInteiro);
    s << indent << "segundoInteiro: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.segundoInteiro);
    s << indent << "texto: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.texto);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HELLO-WORLD_MESSAGE_MINHAMENSAGEM_H
